# Paste this into your local Streamlit script (e.g., app.py)

import os
import json
import streamlit as st
from groq import Groq
import fitz  # PyMuPDF
from docx import Document
from io import BytesIO

# Load API Key
working_dir = os.path.dirname(os.path.abspath(__file__))
config_data = json.load(open(f"{working_dir}/config.json"))
GROQIAPI_KEY = config_data["GROQIAPI"]
os.environ["GROQIAPI"] = GROQIAPI_KEY
client = Groq(api_key=GROQIAPI_KEY)

st.set_page_config(page_title="Case Study Builder", page_icon="📚", layout="centered")
st.markdown("<h1 style='text-align: center;'>📚 Case Study Builder</h1>", unsafe_allow_html=True)

with st.expander("📂 Upload Case Study Documents", expanded=True):
    uploaded_files = st.file_uploader("Supported formats: PDF, Word, or Text files", accept_multiple_files=True, type=['pdf', 'docx', 'txt'])

if "last_case_study" not in st.session_state:
    st.session_state.last_case_study = ""
if "editable_case" not in st.session_state:
    st.session_state.editable_case = ""
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

system_prompt = ( """
        You are a professional case study generator for a Program Manager leadership course.
        Use the uploaded content to generate a compelling case that follows internationally accepted academic case writing guidelines, combining AMRC, CAIS, and Penn State standards.
        Structure the output using the following six sections:
        1. Opening Paragraph  
        - Clearly state the date, location, and organization.  
        - Identify the main decision-maker by full name and role.  
        - Describe the event or issue trigger that brought the situation to light.  
        - Introduce the core problem or opportunity without revealing the outcome.  
        - Keep it concise and written in past tense, using a neutral and journalistic tone.
        2. Background  
        - Provide a brief history of the organization and relevant context such as industry, region, size, and financial position.  
        - Include only details that are relevant for understanding the case.  
        - Ensure the tone is factual and objective.
        3. Focal Area and Internal Tension  
        - Describe the department, product, policy, or personnel involved.  
        - Highlight relevant organizational dynamics, cultural or political complexity, or competing interests.  
        - Include direct quotes or representative perspectives if available.
        4. Key Decision or Problem  
        - Present the dilemma or major decision the protagonist faces.  
        - Ensure the issue is open-ended, with no clear best answer.  
        - Avoid providing any form of analysis or hint at solutions.
        5. Alternatives  
        - Present two or three plausible options the protagonist is considering.  
        - Frame them neutrally as action choices.  
        - Avoid showing preference toward any option.
        6. Conclusion  
        - Conclude the case at the same time point introduced in the opening paragraph.  
        - Reiterate the challenge or uncertainty faced.  
        - End in a way that encourages classroom discussion.
         
         

        Writing Guidelines:
        - Write the entire case in past tense, except for direct quotes or exhibit captions.
        - Use plain, clear, and concise English that avoids complex sentence structures. Do not use idioms, metaphors, or regional expressions.
        - Maintain a neutral, journalistic tone throughout the case. Present facts and descriptions objectively, without showing personal bias or taking sides.
        - Do not include any analysis, interpretation, or recommendations. The case should not teach or explain the concepts — leave that for the classroom.
        - Avoid dramatic storytelling, flowery language, or fictionalized details (e.g., sunsets, internal thoughts, or emotionally loaded phrasing). Stick to the facts and actual events.
        - Keep paragraphs short and readable. Break information into logical sections that help the student understand the context and dilemma.
        - Ensure characters have clear roles and names. Introduce them by full name and position the first time they appear.
        - Use quotes only when necessary to reflect realistic perspectives or stakeholder voices. Do not overuse them.
        - Minimize use of abbreviations unless they are industry-standard. Always define an abbreviation the first time it's used.
        - Do not include the outcome of the decision or what happened afterward. The case must conclude at the same point in time as the opening paragraph.
        - Make sure the issue or decision point is realistic, debatable, and suitable for a 60–70 minute classroom discussion with ~2 hours of student preparation.

        Educational Objective:  
        The case should allow students to identify key issues, analyze multiple perspectives, evaluate competing trade-offs, and propose justifiable decisions. The case should be usable in a 60 to 70-minute classroom session and suitable for about 2 hours of student preparation time.
        """
        )

def extract_text_from_file(file):
    text = ""
    try:
        if file.type == "application/pdf":
            with fitz.open(stream=file.read(), filetype="pdf") as doc:
                for page in doc:
                    text += page.get_text()
        elif file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            docx_file = Document(file)
            for para in docx_file.paragraphs:
                text += para.text + "\n"
        elif file.type.startswith("text/"):
            text = file.read().decode("utf-8")
    except Exception as e:
        st.warning(f"Couldn't read {file.name}: {e}")
    return text

def generate_docx_buffer(content):
    buffer = BytesIO()
    doc = Document()
    doc.add_heading("Generated Case Study", level=1)
    for section in content.split("\n\n"):
        doc.add_paragraph(section.strip())
    doc.save(buffer)
    buffer.seek(0)
    return buffer

def generate_pdf_buffer(content):
    buffer = BytesIO()
    doc = fitz.open()
    page = doc.new_page()
    y = 50
    for paragraph in content.strip().split("\n\n"):
        page.insert_text((50, y), paragraph.strip(), fontsize=11)
        y += 30
        if y > 750:
            page = doc.new_page()
            y = 50
    doc.save(buffer)
    doc.close()
    buffer.seek(0)
    return buffer

def generate_stakeholder_matrix(case_text):
    messages = [
        {"role": "system", "content": "You are an analyst extracting stakeholder information from case studies."},
        {"role": "user", "content": f"From the following case, create a stakeholder matrix table (Name | Role | Interest | Influence):\n\n{case_text}"}
    ]
    response = client.chat.completions.create(
        model="llama-3.3-70b-versatile",
        messages=messages,
        max_tokens=512
    )
    return response.choices[0].message.content.strip()

def generate_stakeholder_perspectives(case_text):
    messages = [
        {"role": "system", "content": "You are a business analyst helping instructors understand stakeholder viewpoints."},
        {"role": "user", "content": f"From the case study below, create a table (Name | Position | Viewpoint on Issue):\n\n{case_text}"}
    ]
    response = client.chat.completions.create(
        model="llama-3.3-70b-versatile",
        messages=messages,
        max_tokens=512
    )
    return response.choices[0].message.content.strip()

def generate_assignment_questions(case_text):
    messages = [
        {"role": "system", "content": "You are a university-level instructional designer."},
        {"role": "user", "content": f"Generate 3 reflective assignment questions for students based on this case:\n\n{case_text}"}
    ]
    response = client.chat.completions.create(
        model="llama-3.3-70b-versatile",
        messages=messages,
        max_tokens=512
    )
    return response.choices[0].message.content.strip()

user_input = st.chat_input("Say hello or ask a case-related question...")

for message in st.session_state.chat_history:
    st.chat_message(message["role"]).markdown(message["content"])

if user_input:
    st.chat_message("user").markdown(user_input)
    st.session_state.chat_history.append({"role": "user", "content": user_input})

    # If we have a case study, add it as system context
    if st.session_state.last_case_study:
        messages = [
            {"role": "system", "content": "You are a helpful AI tutor answering questions based on the following case study:\n\n" + st.session_state.last_case_study}
        ] + st.session_state.chat_history
    else:
        messages = st.session_state.chat_history

    response = client.chat.completions.create(
        model="llama-3.3-70b-versatile",
        messages=messages,
        max_tokens=1024
    )
    reply = response.choices[0].message.content
    st.chat_message("assistant").markdown(reply)
    st.session_state.chat_history.append({"role": "assistant", "content": reply})


if uploaded_files:
    all_text = ""
    for file in uploaded_files:
        all_text += extract_text_from_file(file)
        st.success(f"✅ {file.name} uploaded successfully.")

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": all_text}
    ]

    with st.spinner("Generating case study..."):
        try:
            response = client.chat.completions.create(
                model="llama-3.3-70b-versatile",
                messages=messages,
                max_tokens=4096
            )
            case = response.choices[0].message.content
            st.session_state.last_case_study = case
            st.session_state.editable_case = case

            matrix = generate_stakeholder_matrix(case)
            perspectives = generate_stakeholder_perspectives(case)
            questions = generate_assignment_questions(case)

            full_output = (
                f"{case}\n\n"
                f"### 🧾 Stakeholder Involvement Matrix\n{matrix}\n\n"
                f"### 🎯 Stakeholder Perspectives\n{perspectives}\n\n"
                f"### 📘 Assignment Questions\n{questions}"
            )

            st.chat_message("assistant").markdown(full_output)
            edited = st.text_area("✏️ Edit Case and Add-ons", value=full_output, height=600)

            docx_buffer = generate_docx_buffer(edited)
            pdf_buffer = generate_pdf_buffer(edited)

            col1, col2 = st.columns(2)
            with col1:
                st.download_button("📄 Download DOCX", docx_buffer, "case_study.docx", mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document", use_container_width=True)
            with col2:
                st.download_button("📝 Download PDF", pdf_buffer, "case_study.pdf", mime="application/pdf", use_container_width=True)

        except Exception as e:
            st.error(f"❌ Failed to generate: {e}")
